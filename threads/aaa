package nachos.threads;
import nachos.ag.BoatGrader;
import java.util.LinkedList;
public class Boat
{
    static BoatGrader bg;
    private static Lock lock;
    private static String posBoat;
    private static int numOahuChild;
    private static int numOahuAdult;
    private static int numMalokaiAdult;
    private static int numMalokaiChild;
    private static Condition childWaitOahu;
    private static Condition childWaitMalokai;
    private static Condition adultWaitOahu;
    private static LinkedList<KThread> waitChildren;
    private static boolean Done;
    private static boolean waited;

    public static void selfTest()
    {
        BoatGrader b = new BoatGrader();

        //System.out.println("\n ***Testing Boats with only 2 children***");
       // begin(0, 2, b);

	    System.out.println("\n ***Testing Boats with 2 children, 1 adult***");
      	begin(1, 2, b);

//  	System.out.println("\n ***Testing Boats with 3 children, 3 adults***");
//  	begin(3, 3, b);
    }

    public static void begin( int adults, int children, BoatGrader b )
    {
        // Store the externally generated autograder in a class
        // variable to be accessible by children.
        bg = b;

        // Instantiate global variables here
        numOahuChild = 0;
        numMalokaiAdult = 0;
        numMalokaiChild = 0;
        waited = false;
        numOahuAdult = 0;
        lock = new Lock();
        childWaitMalokai = new Condition(lock);
        childWaitOahu = new Condition(lock);
        adultWaitOahu = new Condition(lock);
        posBoat = "Oahu";
        waitChildren = new LinkedList<KThread>();

        Done = false;
        lock.acquire();


        // Create threads here. See section 3.4 of the Nachos for Java
        // Walkthrough linked from the projects page.
        for(int i=0; i<adults; i++){
            Runnable r = new Runnable() {
                public void run() {
                    AdultItinerary();
                }
            };
            KThread t = new KThread(r);
            t.setName("Adult on Oahu");
            t.fork();
        }

        for(int j=0; j<children; j++){
            Runnable r = new Runnable() {
                public void run() {
                    ChildItinerary();
                }
            };
            KThread t = new KThread(r);
            t.setName("Child on Oahu");
            t.fork();
        }

    }

    static void AdultItinerary()
    {
	/* This is where you should put your solutions. Make calls
	   to the BoatGrader to show that it is synchronized. For
	   example:
	       bg.AdultRowToMolokai();
	   indicates that an adult has rowed the boat across to Molokai
	*/

        lock.acquire();
        System.out.println("\n hola");

        numOahuAdult++;
        while(sitadult() == 0){
            System.out.println("\n ***Testing Boats with 2 children, 1 adult***");

            if(posBoat.equals("Oahu")){
                System.out.println("\n ***Testing Boats with 2 children, 1 adult***");

                childWaitOahu.wake();
            }
            else{
                childWaitMalokai.wake();
            }
        }

        sendAdult(posBoat);
        childWaitMalokai.wake();
        lock.release();

    }
    static void ChildItinerary()
    {
        lock.acquire();
        numOahuChild++;
        while(!Done){
            while(sitchild()==0){
                if(posBoat.equals("Oahu")){
                    childWaitOahu.wake();
                    childWaitMalokai.sleep();
                }
                else{
                    childWaitMalokai.wake();
                    childWaitOahu.sleep();
                }
                adultWaitOahu.wake();
            }
            if(!Done){
                sendChild(posBoat);
            }


        }
        lock.release();
    }
    public static int termino(){
        if(numOahuChild ==0 && numOahuAdult ==0 && posBoat == "Malokai"){
            return 1;
        }
        else
            return 0;
    }

    public static void sendChild(String pos){
        if(pos.equals("Oahu")){
            if(!waited){
                numOahuChild--;
                bg.ChildRowToMolokai();
                waitChildren.add(KThread.currentThread());
                waited = true;

            }
            else{
                numOahuChild--;
                bg.ChildRideToMolokai();
                posBoat = "Molokai";
                KThread first = waitChildren.removeFirst();
                numMalokaiChild =+ 2;
                waited = false;
            }
        }
        else{
            numMalokaiChild--;
            bg.ChildRideToOahu();
            numOahuChild++;
            posBoat="Oahu";
        }
    }
    public static void sendAdult(String pos){
        if(pos.equals("Oahu")){
            numOahuAdult --;
            bg.AdultRowToMolokai();
            posBoat = "Molokai";
            numMalokaiAdult ++;
            KThread.currentThread().setName("Adult on Molokai");

        }
    }

    public static int sitadult(){
        if(posBoat.equals("Oahu")){
            if(KThread.currentThread().getName().equals("Adult on Oahu") && numMalokaiChild > 0){
                return 1;
            }
            else{
                return 0;
            }
        }
        else{
            return 0;
        }
    }

    public static int sitchild(){
        if(posBoat.equals("Oahu")){
            if(KThread.currentThread().getName().equals("Child on Oahu") && waitChildren.size() < 2){
                return 1;
            }
            else{
                return 0;
            }
        }
        else{
            if(KThread.currentThread().getName().equals("Child on Malokai")){
                return 1;
            }
            else{
                return 0;
            }
        }
    }



    static void SampleItinerary()
    {
        // Please note that this isn't a valid solution (you can't fit
        // all of them on the boat). Please also note that you may not
        // have a single thread calculate a solution and then just play
        // it back at the autograder -- you will be caught.
        System.out.println("\n ***Everyone piles on the boat and goes to Molokai***");
        bg.AdultRowToMolokai();
        bg.ChildRideToMolokai();
        bg.AdultRideToMolokai();
        bg.ChildRideToMolokai();
    }


}